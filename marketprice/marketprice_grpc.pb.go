// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package marketprice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarketPriceClient is the client API for MarketPrice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketPriceClient interface {
	// You can get the btc_usd market price.
	BtcUsd(ctx context.Context, in *TimeParam, opts ...grpc.CallOption) (*PriceResp, error)
	// You can get the btc_jpy market price.
	BtcJpy(ctx context.Context, in *TimeParam, opts ...grpc.CallOption) (*PriceResp, error)
	// You can get the btc_usd price array.
	BtcUsdArray(ctx context.Context, in *TimeRange, opts ...grpc.CallOption) (*PriceArray, error)
	// You can get the btc_jpy price array.
	BtcJpyArray(ctx context.Context, in *TimeRange, opts ...grpc.CallOption) (*PriceArray, error)
}

type marketPriceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketPriceClient(cc grpc.ClientConnInterface) MarketPriceClient {
	return &marketPriceClient{cc}
}

func (c *marketPriceClient) BtcUsd(ctx context.Context, in *TimeParam, opts ...grpc.CallOption) (*PriceResp, error) {
	out := new(PriceResp)
	err := c.cc.Invoke(ctx, "/marketprice.MarketPrice/BtcUsd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketPriceClient) BtcJpy(ctx context.Context, in *TimeParam, opts ...grpc.CallOption) (*PriceResp, error) {
	out := new(PriceResp)
	err := c.cc.Invoke(ctx, "/marketprice.MarketPrice/BtcJpy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketPriceClient) BtcUsdArray(ctx context.Context, in *TimeRange, opts ...grpc.CallOption) (*PriceArray, error) {
	out := new(PriceArray)
	err := c.cc.Invoke(ctx, "/marketprice.MarketPrice/BtcUsdArray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketPriceClient) BtcJpyArray(ctx context.Context, in *TimeRange, opts ...grpc.CallOption) (*PriceArray, error) {
	out := new(PriceArray)
	err := c.cc.Invoke(ctx, "/marketprice.MarketPrice/BtcJpyArray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketPriceServer is the server API for MarketPrice service.
// All implementations must embed UnimplementedMarketPriceServer
// for forward compatibility
type MarketPriceServer interface {
	// You can get the btc_usd market price.
	BtcUsd(context.Context, *TimeParam) (*PriceResp, error)
	// You can get the btc_jpy market price.
	BtcJpy(context.Context, *TimeParam) (*PriceResp, error)
	// You can get the btc_usd price array.
	BtcUsdArray(context.Context, *TimeRange) (*PriceArray, error)
	// You can get the btc_jpy price array.
	BtcJpyArray(context.Context, *TimeRange) (*PriceArray, error)
	mustEmbedUnimplementedMarketPriceServer()
}

// UnimplementedMarketPriceServer must be embedded to have forward compatible implementations.
type UnimplementedMarketPriceServer struct {
}

func (UnimplementedMarketPriceServer) BtcUsd(context.Context, *TimeParam) (*PriceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BtcUsd not implemented")
}
func (UnimplementedMarketPriceServer) BtcJpy(context.Context, *TimeParam) (*PriceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BtcJpy not implemented")
}
func (UnimplementedMarketPriceServer) BtcUsdArray(context.Context, *TimeRange) (*PriceArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BtcUsdArray not implemented")
}
func (UnimplementedMarketPriceServer) BtcJpyArray(context.Context, *TimeRange) (*PriceArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BtcJpyArray not implemented")
}
func (UnimplementedMarketPriceServer) mustEmbedUnimplementedMarketPriceServer() {}

// UnsafeMarketPriceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketPriceServer will
// result in compilation errors.
type UnsafeMarketPriceServer interface {
	mustEmbedUnimplementedMarketPriceServer()
}

func RegisterMarketPriceServer(s grpc.ServiceRegistrar, srv MarketPriceServer) {
	s.RegisterService(&MarketPrice_ServiceDesc, srv)
}

func _MarketPrice_BtcUsd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketPriceServer).BtcUsd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketprice.MarketPrice/BtcUsd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketPriceServer).BtcUsd(ctx, req.(*TimeParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketPrice_BtcJpy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketPriceServer).BtcJpy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketprice.MarketPrice/BtcJpy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketPriceServer).BtcJpy(ctx, req.(*TimeParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketPrice_BtcUsdArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketPriceServer).BtcUsdArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketprice.MarketPrice/BtcUsdArray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketPriceServer).BtcUsdArray(ctx, req.(*TimeRange))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketPrice_BtcJpyArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketPriceServer).BtcJpyArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketprice.MarketPrice/BtcJpyArray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketPriceServer).BtcJpyArray(ctx, req.(*TimeRange))
	}
	return interceptor(ctx, in, info, handler)
}

// MarketPrice_ServiceDesc is the grpc.ServiceDesc for MarketPrice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketPrice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "marketprice.MarketPrice",
	HandlerType: (*MarketPriceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BtcUsd",
			Handler:    _MarketPrice_BtcUsd_Handler,
		},
		{
			MethodName: "BtcJpy",
			Handler:    _MarketPrice_BtcJpy_Handler,
		},
		{
			MethodName: "BtcUsdArray",
			Handler:    _MarketPrice_BtcUsdArray_Handler,
		},
		{
			MethodName: "BtcJpyArray",
			Handler:    _MarketPrice_BtcJpyArray_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "marketprice/marketprice.proto",
}
